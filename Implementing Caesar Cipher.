def caesar_cipher(message, shift, mode):
    """
    Encrypts or decrypts a message using the Caesar Cipher.
    
    Args:
        message (str): The input message to be encrypted or decrypted.
        shift (int): The number of positions each character should be shifted.
        mode (str): Specify 'encrypt' to encrypt the message, 'decrypt' to decrypt it.
    
    Returns:
        str: The transformed message.
    """
    result = []
    
    # Iterate through each character in the message
    for char in message:
        if char.isalpha():  # Check if the character is a letter
            # Determine whether the character is uppercase or lowercase
            base = 65 if char.isupper() else 97
            
            # Calculate the new position of the character
            if mode == 'encrypt':
                new_position = (ord(char) - base + shift) % 26
            else:  # mode is 'decrypt'
                new_position = (ord(char) - base - shift) % 26
            
            # Convert the new position back to a character and add to the result
            new_char = chr(new_position + base)
            result.append(new_char)
        else:
            # Non-alphabetic characters stay the same
            result.append(char)
    
    # Join the result list into a string and return it
    return ''.join(result)


def main():
    # Get the message and shift value from the user
    message = input("Enter the message: ")
    shift = int(input("Enter the shift value: "))
    
    # Encrypt the message
    encrypted_message = caesar_cipher(message, shift, 'encrypt')
    print(f"Encrypted message: {encrypted_message}")
    
    # Decrypt the message
    decrypted_message = caesar_cipher(encrypted_message, shift, 'decrypt')
    print(f"Decrypted message (should match the original): {decrypted_message}")

# If the script is being run directly (not imported), start the program
if __name__ == "__main__":
    main()
